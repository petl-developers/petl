# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist = py27, py36, py37, py38, py39, py310, py311, {py36,py37,py38,py39,py310,py311,py312}-docs

[testenv]
# get stable output for unordered types
setenv =
    PYTHONHASHSEED = 42
    py27: PY_MAJOR_VERSION = py2
    py36,py37,py38,py39,py310,py311,py312: PY_MAJOR_VERSION = py3
commands =
    pytest --cov=petl --cov-report lcov:lcov.info petl
    coverage report -m
deps =
    -rrequirements-tests.txt
    -rrequirements-formats.txt

[testenv:{py36,py37,py38,py39,py310,py311,py312}-docs]
# build documentation under similar environment to readthedocs
changedir = docs
deps =
    -rrequirements-docs.txt
commands =
    sphinx-build -W -b html -d {envtmpdir}/doctrees .  {envtmpdir}/html

[testenv:{py36,py37,py38,py39,py310,py311,py312}-doctest]
commands =
    py36,py37,py38,py39,py310,py311,py312: pytest --doctest-modules --cov=petl --cov-report lcov:lcov.info petl
[testenv:{py36,py37,py38,py39}-dochtml]
changedir = docs
deps =
    -rrequirements-docs.txt
commands =
    sphinx-build -W -b singlehtml -d {envtmpdir}/doctrees .  _build/singlehtml

[testenv:remote]
#? Create individual containers with the following commands:
#$ docker run -it --name samba -p 139:139 -p 445:445 -d "dperson/samba" -p -u "petl;test" -s "public;/public-dir;yes;no;yes;all"
#$ docker run -it --name sftp -p 22:22 -d atmoz/sftp petl:test:::public
#? Or create both with:
#$ docker compose up --detach samba sftp
#? Stop and remove the containers with:
#$ docker compose down --remove-orphans -v --rmi local
setenv =
    {[testenv]setenv}
    PETL_TEST_SMB=smb://WORKGROUP;petl:test@localhost/public/
    PETL_TEST_SFTP=sftp://petl:test@localhost/public/
commands =
    pytest --cov=petl --cov-report lcov:lcov.info petl
deps =
    {[testenv]deps}
    -rrequirements-remote.txt

[testenv:database]
#? Create individual test containers with the following commands:
#$ docker run -it --name mysql -p 3306:3306 -p 33060:33060 -e MYSQL_ROOT_PASSWORD=pass0 -e MYSQL_DATABASE=petl -e MYSQL_USER=petl -e MYSQL_PASSWORD=test -d mysql:latest
#$ docker run -it --name postgres -p 5432:5432 -e POSTGRES_DB=petl -e POSTGRES_USER=petl -e POSTGRES_PASSWORD=test -d postgres:latest
#? Or create both with:
#$ docker compose up --detach mysql postgres
setenv =
    {[testenv]setenv}
commands =
    pytest --cov=petl --cov-report lcov:lcov.info petl
deps =
    -rrequirements-tests.txt
    -rrequirements-database.txt

[testenv:compose]
#? Create test containers and run tests with the following commands:
#$ tox -e compose
setenv =
    {[testenv:remote]setenv}
allowlist_externals =
    docker
commands =
    docker compose up --detach
    pytest --cov=petl --cov-report lcov:lcov.info petl
    coverage report -m
    docker compose down --remove-orphans -v --rmi local
deps =
    {[testenv]deps}
    {[testenv:remote]deps}
    {[testenv:database]deps}

[testenv:mysqldb]
basepython = python2.7
setenv =
    PYTHONHASHSEED = 42
deps =
    MySQL-python==1.2.5
    SQLAlchemy==1.2.10
    -rrequirements-tests.txt
commands =
    pytest petl
